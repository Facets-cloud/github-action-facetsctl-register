import { Artifact } from "../types";
export declare function fetchUserDetails(cpUrl: string, username: string, token: string): Promise<any>;
export declare function refreshCredentials(cpUrl: string, username: string, accessToken: string, environmentId: string): Promise<any>;
export declare function getAllClustersByStackName(cpUrl: string, username: string, accessToken: string, blueprintName: string): Promise<any>;
export declare function fetchPushCredentials(cpUrl: string, username: string, accessToken: string, artifactName: string, registrationType: string, registrationValue: string): Promise<import("axios").AxiosResponse<any, any>>;
export declare function fetchPushCredentialsByBranch(cpUrl: string, username: string, accessToken: string, artifactName: string, branchName: string): Promise<import("axios").AxiosResponse<any, any>>;
export declare function registerArtifact(cpUrl: string, username: string, accessToken: string, artifact: Artifact): Promise<import("axios").AxiosResponse<any, any>>;
export declare function pushArtifactWithMetadata(cpUrl: string, username: string, accessToken: string, artifact: Artifact): Promise<import("axios").AxiosResponse<any, any>>;
export declare function getKubeConfigFileContent(cpUrl: string, username: string, accessToken: string, clusterId: string): Promise<import("axios").AxiosResponse<any, any>>;
export declare function getClusterById(cpUrl: string, username: string, accessToken: string, clusterId: string): Promise<import("axios").AxiosResponse<any, any>>;
export declare function registerArtifactByEnv(cpUrl: string, username: string, accessToken: string, artifact: Artifact): Promise<import("axios").AxiosResponse<any, any>>;
export declare function registerArtifactByReleaseStream(cpUrl: string, username: string, accessToken: string, artifact: Artifact): Promise<import("axios").AxiosResponse<any, any>>;
